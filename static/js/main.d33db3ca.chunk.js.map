{"version":3,"sources":["App.js","index.js"],"names":["Parent","getChildrenComponent","name","console","log","props","children","React","Children","toArray","component","forEach","child","length","isValidElement","type","getComponentByGivenProperty","displayName","this","Component","ChildContainerOne","className","ChildContainerTwo","ChildContainerThree","ClassChildContainer","GiveProperty","ReactDOM","render","document","getElementById"],"mappings":"6PA+CO,IAAMA,EAAb,2MAEEC,qBAAuB,SAAAC,GAMrBC,QAAQC,IAAI,yBAA0B,EAAKC,MAAMC,UACjDH,QAAQC,IAAI,2BAA4BG,IAAMC,SAASC,QAAQ,EAAKJ,MAAMC,WAE1E,IAAII,EAAY,KAoBhB,OAlBAH,IAAMC,SAASG,QAAQJ,IAAMC,SAASC,QAAQ,EAAKJ,MAAMC,WAAW,SAAAM,GAClET,QAAQC,IAAI,iBAAkBQ,GAK3BL,IAAMC,SAASC,QAAQ,EAAKJ,MAAMC,UAAUO,OAAS,GAErDN,IAAMO,eAAeF,IAEC,oBAAfA,EAAMG,MAEbH,EAAMG,KAAKb,OAASA,IAEnBQ,EAAYE,EACZT,QAAQC,IAAI,yBAA0BQ,EAAMG,KAAKb,UAGhDQ,GA/BX,EAmCEM,4BAA8B,SAAAd,GAC5B,IAAIQ,EAAY,KAgBhB,OAdAH,IAAMC,SAASG,QAAQJ,IAAMC,SAASC,QAAQ,EAAKJ,MAAMC,WAAW,SAAAM,GAE9DL,IAAMC,SAASC,QAAQ,EAAKJ,MAAMC,UAAUO,OAAS,GACtDN,IAAMO,eAAeF,IACC,oBAAfA,EAAMG,MAEdH,EAAMG,KAAKE,aAEVL,EAAMG,KAAKE,cAAgBf,IAE1BQ,EAAYE,EACZT,QAAQC,IAAI,yBAA0BQ,EAAMG,KAAKE,iBAGhDP,GApDX,wEAwDI,OACE,oCAEIQ,KAAKjB,qBAAqB,uBAG1BiB,KAAKjB,qBAAqB,qBAG1BiB,KAAKF,4BAA4B,kBAjE3C,GAA4BT,IAAMY,WAwErBC,EAAoB,SAAAf,GAC/B,OACE,yBAAKgB,UAAU,uBACZhB,EAAMC,WAKAgB,EAAoB,SAAAjB,GAC/B,OACE,yBAAKgB,UAAU,uBACZhB,EAAMC,WAKAiB,EAAsB,SAAAlB,GACjC,OACE,yBAAKgB,UAAU,yBACZhB,EAAMC,WAKAkB,EAAb,iLAEI,OACE,6BACGN,KAAKb,MAAMC,cAJpB,GAAyCC,IAAMY,WAUlCM,EAAe,SAAApB,GAAK,OAAI,yBAAKgB,UAAU,iBAAiBhB,EAAMC,WAE3EmB,EAAaR,YAAc,YCtJ3BS,IAASC,OAAO,mBDFD,WACb,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAAlB,4BAGA,iGACqE,6BADrE,+EAE8E,6BAF9E,8DAMA,kBAAC,EAAD,KACE,wCAGA,kBAAC,EAAD,YAGA,kBAAC,EAAD,YAGA,kBAAC,EAAD,cAGA,kBAAC,EAAD,eAKF,wFAIA,kBAAC,EAAD,KACE,kBAAC,EAAD,yBCjCQ,MAASO,SAASC,eAAe,U","file":"static/js/main.d33db3ca.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        Children component names\r\n      </header>\r\n      <p>\r\n        Markup order of children components: parraf, One, Two, Three, Class<br/>\r\n        Parent will select components by name (excluding elements, texts, functions)<br/>\r\n        and render selected children components in different order\r\n      </p>\r\n\r\n      <Parent>\r\n        <p>\r\n          Paragraph\r\n        </p>\r\n        <ChildContainerOne>\r\n          One\r\n        </ChildContainerOne>\r\n        <ChildContainerTwo>\r\n          Two\r\n        </ChildContainerTwo>\r\n        <ChildContainerThree>\r\n          Three\r\n        </ChildContainerThree>\r\n        <ClassChildContainer>\r\n          Class\r\n        </ClassChildContainer>\r\n      </Parent>\r\n\r\n      <p>\r\n        Or give the component a new property to use for selection\r\n      </p>\r\n\r\n      <Parent>\r\n        <GiveProperty>\r\n          New property\r\n        </GiveProperty>\r\n      </Parent>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport class Parent extends React.Component {\r\n\r\n  getChildrenComponent = name => {\r\n    // Zero children: props.children = undefined\r\n    // One child: props.children = {...}\r\n    // If the one child is a string: props.children = 'the-string'\r\n    // Several children: props.children = [{...}, {...}, ...]\r\n    // With React.Children.toArray, the output is always an array: empty (truthy) or with one or more objects\r\n    console.log('props.children as-is: ', this.props.children);\r\n    console.log('props.children toArray: ', React.Children.toArray(this.props.children));\r\n\r\n    let component = null;\r\n\r\n    React.Children.forEach(React.Children.toArray(this.props.children), child => {\r\n      console.log('Child object: ', child);\r\n\r\n      if(\r\n        // Exclude empty .toArray.\r\n        // If not using .toArray and using .length of props.children as-is and children is a string, the .length will give the string length\r\n        (React.Children.toArray(this.props.children).length > 0) &&\r\n        // Must be a React component or a React element (HTML element), excludes eg. text\r\n        (React.isValidElement(child)) &&\r\n        // Must be a function, excludes HTML elements = it's a React component\r\n        (typeof child.type === 'function') &&\r\n        // A React component has it's name in type.name\r\n        (child.type.name === name)){\r\n\r\n          component = child;\r\n          console.log('React Component name: ', child.type.name);\r\n      }\r\n    });\r\n    return component;\r\n  };\r\n\r\n  // If the React Component doesn't have a child.type.name (if it's just an empty string), then give it a new property to use as identification\r\n  getComponentByGivenProperty = name => {\r\n    let component = null;\r\n\r\n    React.Children.forEach(React.Children.toArray(this.props.children), child => {\r\n\r\n      if((React.Children.toArray(this.props.children).length > 0) &&\r\n        (React.isValidElement(child)) &&\r\n        (typeof child.type === 'function') &&\r\n        // Check if the component has the property you gave it\r\n        child.type.displayName &&\r\n        // Select the component by it's given property\r\n        (child.type.displayName === name)){\r\n\r\n          component = child;\r\n          console.log('React Component name: ', child.type.displayName);\r\n      }\r\n    });\r\n    return component;\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <>\r\n        {\r\n          this.getChildrenComponent('ClassChildContainer')\r\n        }\r\n        {\r\n          this.getChildrenComponent('ChildContainerTwo')\r\n        }\r\n        {\r\n          this.getComponentByGivenProperty('MyNewName')\r\n        }\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport const ChildContainerOne = props => {\r\n  return(\r\n    <div className=\"child-container-one\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ChildContainerTwo = props => {\r\n  return(\r\n    <div className=\"child-container-two\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const ChildContainerThree = props => {\r\n  return(\r\n    <div className=\"child-container-three\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport class ClassChildContainer extends React.Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport const GiveProperty = props => <div className='give-property'>{props.children}</div>;\r\n// Give it a property wich a value to use as identification. Works with funcional and class components\r\nGiveProperty.displayName = 'MyNewName';\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}